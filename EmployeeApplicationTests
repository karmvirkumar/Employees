package com.example;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import com.example.entity.Emp;
import com.example.repo.EmpRepo;
import com.example.service.EmpService;

@RunWith(SpringRunner.class)
@SpringBootTest
class EmployeeApplicationTests {
	/*
	 * @RunWith:- annotation has been replaced by  @ExtendWith annotation. that provide  backward compatibility.
	 * SpringRunner:- SpringRunner is an alias for the SpringJUnit4ClassRunner, to use this class.
	 * @MockBean:-@MockBean to add mock objects to the Spring application context.
	 * When:- When the x method is called then return Y.
	 */

	@Test
	void contextLoads() {
	}

	@Autowired
	private EmpService empService;

	@MockBean
	private EmpRepo empRepo;

	@Test
	public void saveEmpDetailsTest() {
		List<Emp> emp = new ArrayList<Emp>();
		when(empRepo.saveAll(emp)).thenReturn(emp);
		assertEquals(emp, empService.saveEmpDetails(emp));
	}

	@Test
	public void getEmpDetailsTest() {
		//List<Emp> emp = new ArrayList<Emp>(); // if data is not there working fine.
		//when(empRepo.findAll()).thenReturn(emp);
		//assertEquals(0, empService.getEmpDetails().size());
		
	    when(empRepo.findAll()).thenReturn(Stream.of(new Emp(101, "Ram", null), 
	    		             new Emp(102, "Mohan", null)).collect(Collectors.toList()));
        assertEquals(2, empService.getEmpDetails().size());
	}
	
}
